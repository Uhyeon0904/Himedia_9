-- Q1
CREATE TABLE IF NOT EXISTS TEAM_INFO(
	TEAM_CODE INT AUTO_INCREMENT PRIMARY KEY,
    TEAM_NAME VARCHAR(100) NOT NULL,
    TEAM_DETAIL VARCHAR(500),
    USE_YN CHAR(2) NOT NULL DEFAULT 'Y' CHECK(USE_YN IN ('Y', 'N'))
)ENGINE = InnoDB;
DESCRIBE team_info;
SELECT * FROM TEAM_INFO;
-- DROP TABLE team_info;

CREATE TABLE IF NOT EXISTS MEMBER_INFO (
	MEMBER_CODE INT AUTO_INCREMENT PRIMARY KEY,
    MEMBER_NAME VARCHAR(70) NOT NULL,
    BIRTH_DATE DATE,
    DIVISION_CODE CHAR(2),
    DETAIL_INFO VARCHAR(500),
    CONTACT VARCHAR(50) NOT NULL,
    TEAM_CODE INT NOT NULL,
    FOREIGN KEY(TEAM_CODE) REFERENCES TEAM_INFO(TEAM_CODE),
    ACTIVE_STATUS CHAR(2) NOT NULL DEFAULT 'Y' CHECK(ACTIVE_STATUS IN ('Y', 'N', 'H'))
)ENGINE = InnoDB;
DESCRIBE member_info;
SELECT * FROM MEMBER_INFO;
-- ALTER TABLE member_info DROP FOREIGN KEY member_info_ibfk_1;
-- DROP TABLE member_info;
-- DROP DATABASE 2024$02$27;

-- Q2
INSERT INTO TEAM_INFO VALUES
(NULL, '음악감상부', '클래식 및 재즈 음악을 감상하는 사람들의 모임', DEFAULT),
(NULL, '맛집탐방부', '맛집을 찾아다니는 사람들의 모임', 'N'),
(NULL, '행복찾기부', NULL, DEFAULT);

INSERT INTO MEMBER_INFO VALUES
(NULL, '송가인', '19900130', '1', '안녕하세요 송가인입니다~', '010-9494-9494', 1, 'H'),
(NULL, '임영웅', '19920503', NULL, '국민아들 임영웅입니다', 'hero@trot.com', 1, DEFAULT),
(NULL, '태진아', NULL, NULL, NULL, '(1급 기밀)', 1, DEFAULT);
-- DELETE FROM MEMBER_INFO WHERE MEMBER_CODE IN (1, 2, 3);

-- Q3
SELECT SUM(C) AS '팀원 수'
FROM (
	SELECT COUNT(*) AS C
    FROM employee E
    LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    WHERE D.DEPT_TITLE = '기술지원부' AND E.JOB_CODE = 'J6'
    UNION ALL
    SELECT COUNT(*)
    FROM employee E
    LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    WHERE D.DEPT_TITLE = '인사관리부' AND E.JOB_CODE = 'J7'
    UNION ALL
    SELECT COUNT(*)
    FROM employee E
	LEFT JOIN department D ON D.DEPT_ID = E.DEPT_CODE
    WHERE D.DEPT_TITLE LIKE '%영업%' AND E.JOB_CODE = 'J3') AS TEAM;
    
    -- Q4-1
SELECT SUB.EMP_ID, SUB.EMP_NAME, SUB.PHONE, SUB.DEPT_TITLE, SUB.JOB_CODE, SUB.SALARY
FROM (
	SELECT E.EMP_ID, E.EMP_NAME, E.PHONE, D.DEPT_TITLE, J.JOB_CODE, E.SALARY
    FROM employee E
    LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    LEFT JOIN job J ON E.JOB_CODE = J.JOB_CODE
    WHERE D.DEPT_TITLE NOT LIKE '%영업%' AND j.JOB_CODE in ('J4', 'J6')
    UNION ALL
    SELECT E.EMP_ID, E.EMP_NAME, E.PHONE, DEPT_TITLE, J.JOB_CODE, E.SALARY
    FROM employee E
    LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    LEFT JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
    WHERE E.SALARY BETWEEN 2000000 AND 3000000 ) AS SUB;
        
-- Q4-2
SELECT SUB.EMP_NAME, SUB.SALARY, COUNT(*) AS EMP_COUNT
FROM (
	SELECT E.EMP_NAME, E.SALARY
    FROM employee E
    LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    LEFT JOIN job J ON E.JOB_CODE = J.JOB_CODE
    WHERE D.DEPT_TITLE NOT LIKE '%영업%' AND j.JOB_NAME in ('J4', 'J6')
    UNION ALL
    SELECT E.EMP_NAME, E.SALARY
    FROM employee E
	LEFT JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    LEFT JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
    WHERE E.SALARY BETWEEN 2000000 AND 3000000) AS SUB
GROUP BY SUB.EMP_NAME, SUB.SALARY;

-- Q4-3
SELECT SUB.EMP_NAME, SUB.SALARY, COUNT(*) AS EMP_COUNT
FROM (
	SELECT E.EMP_NAME, E.SALARY
    FROM employee E
    JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    JOIN job J ON E.JOB_CODE = J.JOB_CODE
    WHERE D.DEPT_TITLE NOT LIKE '%영업%' AND j.JOB_CODE in ('J4', 'J6')
    UNION ALL
    SELECT E.EMP_NAME, E.SALARY
    FROM employee E
	JOIN department D ON E.DEPT_CODE = D.DEPT_ID
    JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
    WHERE E.SALARY BETWEEN 2000000 AND 3000000) AS SUB
GROUP BY SUB.EMP_NAME, SUB.SALARY
ORDER BY EMP_COUNT DESC, SUB.SALARY DESC
LIMIT 3;